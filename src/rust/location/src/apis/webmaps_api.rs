/*
 * Basemap styles service
 *
 * The basemap styles service provides global basemap layers in a variety of styles to use in mapping applications. Basemap layers give geographic context to a map or scene by serving static tiles containing geographic reference data. This data includes, but is not limited to, topographic features, road networks, footpaths, building footprints, water features, administrative boundaries, and localized language place labels. The JSON structure of a basemap style can be returned as the [Mapbox Style Specification](https://docs.mapbox.com/mapbox-gl-js/style-spec/) or the Esri [Web Map Specification](https://developers.arcgis.com/web-map-specification/).
 *
 * The version of the OpenAPI document: 2.4.7
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`arcgis_chartedterritory_base_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisChartedterritoryBaseWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_chartedterritory_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisChartedterritoryWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_coloredpencil_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisColoredpencilWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_community_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisCommunityWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_darkgray_base_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisDarkgrayBaseWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_darkgray_labels_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisDarkgrayLabelsWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_darkgray_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisDarkgrayWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_hillshade_dark_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHillshadeDarkWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_hillshade_light_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHillshadeLightWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_humangeography_base_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHumangeographyBaseWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_humangeography_detail_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHumangeographyDetailWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_humangeography_labels_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHumangeographyLabelsWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_humangeography_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHumangeographyWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_humangeographydark_base_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHumangeographydarkBaseWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_humangeographydark_detail_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHumangeographydarkDetailWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_humangeographydark_labels_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHumangeographydarkLabelsWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_humangeographydark_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHumangeographydarkWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_imagery_labels_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisImageryLabelsWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_imagery_standard_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisImageryStandardWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_imagery_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisImageryWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_lightgray_base_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisLightgrayBaseWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_lightgray_labels_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisLightgrayLabelsWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_lightgray_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisLightgrayWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_midcentury_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisMidcenturyWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_modernantique_base_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisModernantiqueBaseWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_modernantique_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisModernantiqueWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_navigation_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisNavigationWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_navigationnight_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisNavigationnightWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_newspaper_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisNewspaperWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_nova_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisNovaWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_oceans_base_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisOceansBaseWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_oceans_labels_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisOceansLabelsWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_oceans_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisOceansWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_outdoor_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisOutdoorWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_streets_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisStreetsWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_streetsnight_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisStreetsnightWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_streetsrelief_base_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisStreetsreliefBaseWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_streetsrelief_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisStreetsreliefWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_terrain_base_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisTerrainBaseWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_terrain_detail_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisTerrainDetailWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_terrain_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisTerrainWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_topographic_base_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisTopographicBaseWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_topographic_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisTopographicWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_blueprint_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmBlueprintWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_darkgray_base_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmDarkgrayBaseWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_darkgray_labels_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmDarkgrayLabelsWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_darkgray_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmDarkgrayWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_hybrid_detail_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmHybridDetailWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_hybrid_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmHybridWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_lightgray_base_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmLightgrayBaseWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_lightgray_labels_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmLightgrayLabelsWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_lightgray_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmLightgrayWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_navigation_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmNavigationWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_navigationdark_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmNavigationdarkWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_standard_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmStandardWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_standardrelief_base_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmStandardreliefBaseWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_standardrelief_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmStandardreliefWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_streets_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmStreetsWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_streetsrelief_base_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmStreetsreliefBaseWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_streetsrelief_webmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmStreetsreliefWebmapGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`webmaps_self_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebmapsSelfGetError {
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}


/// Returns the JSON for ArcGIS Charted Territory Base as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Charted Territory Base](https://www.arcgis.com/sharing/rest/content/items/39cf4ffa64fa4746bd8a8bb65ec62e94/info/thumbnail/thumbnail1605203449415.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a geopolitical style reminiscent of a printed atlas plate or a school classroom wall map. This layer is designed for use with shaded relief.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=303e75b27af043fd835c981ab9accf84) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_chartedterritory_base_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisChartedterritoryBaseWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/charted-territory/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisChartedterritoryBaseWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Charted Territory as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Charted Territory](https://www.arcgis.com/sharing/rest/content/items/303e75b27af043fd835c981ab9accf84/info/thumbnail/thumbnail1659479127511.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a geopolitical style reminiscent of a printed atlas plate or a school classroom wall map. This layer is designed for use with shaded relief.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=39cf4ffa64fa4746bd8a8bb65ec62e94) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_chartedterritory_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisChartedterritoryWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/charted-territory", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisChartedterritoryWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Colored Pencil as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Colored Pencil](https://www.arcgis.com/sharing/rest/content/items/c0ddf27614bc407f92c35020a9b48afa/info/thumbnail/thumbnail1659479513252.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer is presented in the style of hand-drawn, colored pencil cartography.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=77efd64a713946a2b8d547e73423bcca) in ArcGIS. 
pub async fn arcgis_coloredpencil_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisColoredpencilWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/colored-pencil", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisColoredpencilWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Community as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Community](https://www.arcgis.com/sharing/rest/content/items/184f5b81589844699ca1e132d007920e/info/thumbnail/thumbnail1659479749621.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world in a style that is optimized to display special areas of interest (AOIs) that have been created and edited by Community Maps contributors.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=36551d7048d643618026014f3075327b) in ArcGIS. 
pub async fn arcgis_community_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisCommunityWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/community", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisCommunityWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Dark Gray Base as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Dark Gray Base](https://www.arcgis.com/sharing/rest/content/items/f8dec62d37504266b0578ce7453b808b/info/thumbnail/thumbnail1605204085996.jpeg)  This (v2) vector tile layer provides a detailed basemap for the world featuring a dark neutral background style with minimal colors, labels, and features. This map is designed to be used with Dark Gray Canvas Reference.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=f8dec62d37504266b0578ce7453b808b) in ArcGIS. 
pub async fn arcgis_darkgray_base_webmap_get(configuration: &configuration::Configuration, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisDarkgrayBaseWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/dark-gray/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisDarkgrayBaseWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Dark Gray Labels as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Dark Gray Labels](https://www.arcgis.com/sharing/rest/content/items/8bf7f2dffe434dc9a88f39283823ab09/info/thumbnail/thumbnail1605214219524.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a city reference overlay for the world designed for use over a dark neutral background style with minimal colors, labels, and features. This map is designed to be used with Dark Gray Canvas Base.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=8bf7f2dffe434dc9a88f39283823ab09) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_darkgray_labels_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisDarkgrayLabelsWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/dark-gray/labels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisDarkgrayLabelsWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Dark Gray as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Dark Gray](https://www.arcgis.com/sharing/rest/content/items/7742cd5abef8497288dc81426266df9b/info/thumbnail/thumbnail1659479985387.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a dark neutral background style with minimal colors, labels, and features. This map is designed to be used with Dark Gray Canvas Reference.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=9a2d2c3012c346b08adf961f18b30c89) in ArcGIS. 
pub async fn arcgis_darkgray_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisDarkgrayWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/dark-gray", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisDarkgrayWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Hillshade Dark as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Hillshade Dark](https://www.arcgis.com/sharing/rest/content/items/f513ac256fbe48f091b53182190a7d35/info/thumbnail/thumbnail1585608311285.png)  World Hillshade (Dark) is especially useful in building maps that provide terrain context while highlighting feature layers and labels.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_hillshade_dark_webmap_get(configuration: &configuration::Configuration, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHillshadeDarkWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/hillshade/dark", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHillshadeDarkWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Hillshade Light as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Hillshade Light](https://www.arcgis.com/sharing/rest/content/items/1b243539f4514b6ba35e7d995890db1d/info/thumbnail/thumbnail1718052727979.png)  This layer portrays elevation as an artistic hillshade. The map is designed to be used as a backdrop for topographic, soil, hydro, landcover or other outdoor recreational maps.  For more information about the style, data providers, attribution, and terms of use, go to the following item pages:  - [Charted Territory](https://www.arcgis.com/home/item.html?id=303e75b27af043fd835c981ab9accf84) - [Modern Antique](https://www.arcgis.com/home/item.html?id=b69f2876ce4c4e9db185cdc857fcebc7) - [Streets with Relief](https://www.arcgis.com/home/item.html?id=03daad361e1849bc80cb7b70ed391379) - [Terrain with Labels](https://www.arcgis.com/home/item.html?id=2ef1306b93c9459ca7c7b4f872c070b9) - [OpenStreetMap with Relief](https://www.arcgis.com/home/item.html?id=5b93370c7fc24ca3b8740abd2a55456a)  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_hillshade_light_webmap_get(configuration: &configuration::Configuration, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHillshadeLightWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/hillshade/light", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHillshadeLightWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Human Geography Base as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Human Geography Base](https://www.arcgis.com/sharing/rest/content/items/40fc50413164430ebfa2e6b5ac27de27/info/thumbnail/thumbnail1664265082295.png)  Simple (v2) vector tile layer basemap with no content other than monochromatic land polygons. This map is designed for use with Human Geography Labels and Detail layers.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=6a6bf92e7824417db632aa1d058a13b4) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_humangeography_base_webmap_get(configuration: &configuration::Configuration, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHumangeographyBaseWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/human-geography/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHumangeographyBaseWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Human Geography Detail as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Human Geography Detail](https://www.arcgis.com/sharing/rest/content/items/b15ccad985fa4cb892836b2bde1465e9/info/thumbnail/thumbnail1664265112023.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world, featuring a monochromatic style with content adjusted to support Human Geography information. This map is designed for use with Human Geography Labels and Base layers.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=6a6bf92e7824417db632aa1d058a13b4) in ArcGIS. 
pub async fn arcgis_humangeography_detail_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHumangeographyDetailWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/human-geography/detail", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHumangeographyDetailWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Human Geography Labels as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Human Geography Labels](https://www.arcgis.com/sharing/rest/content/items/b522f3412d474423878e5adafda0fc56/info/thumbnail/thumbnail1664265132944.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer forms a detailed basemap for the world, featuring a monochromatic style with content consisting of labels to support Human Geography information. This map is designed for use with Human Geography Detail and Base layers.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=6a6bf92e7824417db632aa1d058a13b4) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_humangeography_labels_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHumangeographyLabelsWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/human-geography/labels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHumangeographyLabelsWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Human Geography as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Human Geography](https://www.arcgis.com/sharing/rest/content/items/6a6bf92e7824417db632aa1d058a13b4/info/thumbnail/thumbnail1664546258111.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This provides a detailed basemap, featuring a monochromatic style with content adjusted to support Human Geography information.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=6a6bf92e7824417db632aa1d058a13b4) in ArcGIS. 
pub async fn arcgis_humangeography_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHumangeographyWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/human-geography", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHumangeographyWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Human Geography Dark Base as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Human Geography Dark Base](https://www.arcgis.com/sharing/rest/content/items/efbf4b251cc242aca426c18ea0c351fe/info/thumbnail/thumbnail1664265092438.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  Simple (v2) vector tile layer basemap with no content other than dark monochromatic land polygons. This map is designed for use with Human Geography Dark Labels and Detail layers.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=69b9605f8a734c6f861148bb8e5a1f40) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_humangeographydark_base_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHumangeographydarkBaseWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/human-geography-dark/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHumangeographydarkBaseWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Human Geography Dark Detail as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Human Geography Dark Detail](https://www.arcgis.com/sharing/rest/content/items/0168657cb54c4601a0c5815f20127416/info/thumbnail/thumbnail1664265100951.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world, featuring a dark monochromatic style with content adjusted to support Human Geography information. This map is designed for use with Human Geography Dark Labels and Base layers.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=69b9605f8a734c6f861148bb8e5a1f40) in ArcGIS. 
pub async fn arcgis_humangeographydark_detail_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHumangeographydarkDetailWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/human-geography-dark/detail", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHumangeographydarkDetailWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Human Geography Dark Labels as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Human Geography Dark Labels](https://www.arcgis.com/sharing/rest/content/items/94ef8bca232c40728dfe838951798022/info/thumbnail/thumbnail1664265120612.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world, featuring a dark monochromatic style with content adjusted to support Human Geography information. This map is designed for use with Human Geography Dark Detail and Base layers.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=69b9605f8a734c6f861148bb8e5a1f40) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_humangeographydark_labels_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHumangeographydarkLabelsWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/human-geography-dark/labels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHumangeographydarkLabelsWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Human Geography Dark as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Human Geography Dark](https://www.arcgis.com/sharing/rest/content/items/69b9605f8a734c6f861148bb8e5a1f40/info/thumbnail/thumbnail1664546284715.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This provides a detailed basemap, featuring a dark monochromatic style with content adjusted to support Human Geography information.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=69b9605f8a734c6f861148bb8e5a1f40) in ArcGIS. 
pub async fn arcgis_humangeographydark_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHumangeographydarkWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/human-geography-dark", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHumangeographydarkWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Imagery Labels as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Imagery Labels](https://www.arcgis.com/sharing/rest/content/items/e71216afee5045b59e015702a0169183/info/thumbnail/thumbnail1605214382152.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed reference layer for the world designed to be overlaid on imagery.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=c7d2b5c334364e8fb5b73b0f4d6a779b) in ArcGIS. 
pub async fn arcgis_imagery_labels_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>, places: Option<&str>) -> Result<serde_json::Value, Error<ArcgisImageryLabelsWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/imagery/labels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = places {
        local_var_req_builder = local_var_req_builder.query(&[("places", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisImageryLabelsWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Imagery Standard as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Imagery Standard](https://www.arcgis.com/sharing/rest/content/items/c7d2b5c334364e8fb5b73b0f4d6a779b/info/thumbnail/thumbnail1659480145425.png)  This layer presents low-resolution satellite imagery for the world and high-resolution satellite and aerial imagery, typically within 3-5 years of currency, for most of the world.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=c7d2b5c334364e8fb5b73b0f4d6a779b) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_imagery_standard_webmap_get(configuration: &configuration::Configuration, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisImageryStandardWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/imagery/standard", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisImageryStandardWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Imagery as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Imagery](https://www.arcgis.com/sharing/rest/content/items/ea3befe305494bb5b2acd77e1b3135dc/info/thumbnail/thumbnail1659480292164.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This layer presents low-resolution satellite imagery for the world and high-resolution satellite and aerial imagery, typically within 3-5 years of currency, for most of the world.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=c7d2b5c334364e8fb5b73b0f4d6a779b) in ArcGIS. 
pub async fn arcgis_imagery_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>, places: Option<&str>) -> Result<serde_json::Value, Error<ArcgisImageryWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/imagery", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = places {
        local_var_req_builder = local_var_req_builder.query(&[("places", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisImageryWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Light Gray Base as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Light Gray Base](https://www.arcgis.com/sharing/rest/content/items/140be45035d74b5ab4c2a871a8503b84/info/thumbnail/thumbnail1605214510516.jpeg)  This (v2) vector tile layer provides a detailed basemap for the world featuring a light neutral background style with minimal colors, labels, and features.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=140be45035d74b5ab4c2a871a8503b84) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_lightgray_base_webmap_get(configuration: &configuration::Configuration, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisLightgrayBaseWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/light-gray/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisLightgrayBaseWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Light Gray Labels as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Light Gray Labels](https://www.arcgis.com/sharing/rest/content/items/615e9eeef23346b3934faa55f834aa6d/info/thumbnail/thumbnail1605214617146.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed reference overlay for the world featuring a light neutral background style with minimal colors, labels, and features. This map is designed to be used with Light Gray Canvas Base.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=615e9eeef23346b3934faa55f834aa6d) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_lightgray_labels_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisLightgrayLabelsWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/light-gray/labels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisLightgrayLabelsWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Light Gray as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Light Gray](https://www.arcgis.com/sharing/rest/content/items/0f74af7609054be8a29e0ba5f154f0a8/info/thumbnail/thumbnail1659480444177.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a light neutral background style with minimal colors, labels, and features.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=96ed54f1daf24a6992b7e7317bebd744) in ArcGIS. 
pub async fn arcgis_lightgray_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisLightgrayWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/light-gray", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisLightgrayWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Midcentury as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Midcentury](https://www.arcgis.com/sharing/rest/content/items/52d6a28f09704f04b33761ba7c4bf93f/info/thumbnail/thumbnail1659480642524.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer is inspired by the art and advertising of the 1950's. This customized vector style presents a unique design option to the ArcGIS basemaps.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=c97d9da9538b4e6ab9ebbd2fa6e2fd3f) in ArcGIS. 
pub async fn arcgis_midcentury_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisMidcenturyWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/midcentury", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisMidcenturyWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Modern Antique Base as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Modern Antique Base](https://www.arcgis.com/sharing/rest/content/items/ac21aa7d31324027990b03fb9773b7b5/info/thumbnail/thumbnail1605214857470.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  Unique (v2) vector tile layer customization. Updating the look of 18th and 19th century antique maps in the modern world of multi-scale mapping. This map is designed to be used with World Hillshade.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=b69f2876ce4c4e9db185cdc857fcebc7) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_modernantique_base_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisModernantiqueBaseWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/modern-antique/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisModernantiqueBaseWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Modern Antique as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Modern Antique](https://www.arcgis.com/sharing/rest/content/items/b69f2876ce4c4e9db185cdc857fcebc7/info/thumbnail/thumbnail1659480749462.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  Unique (v2) vector tile layer customization. Updating the look of 18th and 19th century antique maps in the modern world of multi-scale mapping. This map is designed to be used with World Hillshade.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=ac21aa7d31324027990b03fb9773b7b5) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_modernantique_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisModernantiqueWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/modern-antique", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisModernantiqueWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Navigation as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Navigation](https://www.arcgis.com/sharing/rest/content/items/78c096abedb9498380f5db1922f96aa0/info/thumbnail/thumbnail1659480881868.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a custom navigation map style.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=ad3775594223464abc4addd501a0c5a8) in ArcGIS. 
pub async fn arcgis_navigation_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>, places: Option<&str>) -> Result<serde_json::Value, Error<ArcgisNavigationWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/navigation", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = places {
        local_var_req_builder = local_var_req_builder.query(&[("places", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisNavigationWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Navigation Night as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Navigation Night](https://www.arcgis.com/sharing/rest/content/items/77073a29526046b89bb5622b6276e933/info/thumbnail/thumbnail1659480999259.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a 'dark mode' version of the Navigation vector basemap, using the same content.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=244d18f67fc046e89d4f04ac839ca56c) in ArcGIS. 
pub async fn arcgis_navigationnight_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>, places: Option<&str>) -> Result<serde_json::Value, Error<ArcgisNavigationnightWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/navigation-night", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = places {
        local_var_req_builder = local_var_req_builder.query(&[("places", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisNavigationnightWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Newspaper as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Newspaper](https://www.arcgis.com/sharing/rest/content/items/e3c062eedf8b487b8bb5b9b08db1b7a9/info/thumbnail/thumbnail1659481176432.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer presents a unique take on the Esri vector tile basemap. This Newspaper style tile layer is a black & white design with halftone patterns, red highlights, and stylized fonts.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=4ba39bdd9bdb42e1a5c5a0664d6aa4d7) in ArcGIS. 
pub async fn arcgis_newspaper_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisNewspaperWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/newspaper", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisNewspaperWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Nova as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Nova](https://www.arcgis.com/sharing/rest/content/items/90f86b329f37499096d3715ac6e5ed1f/info/thumbnail/thumbnail1659481192979.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a dark background with glowing blue symbology inspired by the ArcGIS.com splash screen.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=6e481fb5345748bb8ff50441eb1afb28) in ArcGIS. 
pub async fn arcgis_nova_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisNovaWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/nova", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisNovaWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Oceans Base as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Oceans Base](https://www.arcgis.com/sharing/rest/content/items/1e126e7520f9466c9ca28b8f28b5e500/info/thumbnail/thumbnail1574706730697.jpeg)  This layer is designed to be used as a basemap by marine GIS professionals and as a reference map by anyone interested in ocean data.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=b1dca7ef7b61466785901c41aed89ba5) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_oceans_base_webmap_get(configuration: &configuration::Configuration, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisOceansBaseWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/oceans/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisOceansBaseWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Oceans Labels as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Oceans Labels](https://www.maps.arcgis.com/sharing/rest/content/items/549bc703f887476c9356a8756068767a/info/thumbnail/thumbnail1605305854401.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer is designed to be used as the reference layer for the World Ocean Base map.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=549bc703f887476c9356a8756068767a) in ArcGIS. 
pub async fn arcgis_oceans_labels_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisOceansLabelsWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/oceans/labels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisOceansLabelsWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Oceans as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Oceans](https://www.arcgis.com/sharing/rest/content/items/b1dca7ef7b61466785901c41aed89ba5/info/thumbnail/thumbnail1659481432351.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This layer is designed to be used as a basemap by marine GIS professionals and as a reference map by anyone interested in ocean data.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=b1dca7ef7b61466785901c41aed89ba5) in ArcGIS. 
pub async fn arcgis_oceans_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisOceansWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/oceans", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisOceansWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Outdoor as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Outdoor](https://www.arcgis.com/sharing/rest/content/items/659e7c1b1e374f6c8a89eefe17b23380/info/thumbnail/thumbnail1658946460034.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap with an emphasis on the natural world. It includes rich cartographic styling with vector contours and vector hillshade. This is a multisource style. This layer is in beta.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=a409072a313a43b392bb6003b0da5824) 
pub async fn arcgis_outdoor_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisOutdoorWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/outdoor", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisOutdoorWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Streets as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Streets](https://www.arcgis.com/sharing/rest/content/items/e3e6df1d2f6a485d8a70f28fdd3ce19e/info/thumbnail/thumbnail1626360997976.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a classic Esri street map style.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=ab81d22899024ea08c8bb5a88cc1775e) in ArcGIS. 
pub async fn arcgis_streets_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>, places: Option<&str>) -> Result<serde_json::Value, Error<ArcgisStreetsWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/streets", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = places {
        local_var_req_builder = local_var_req_builder.query(&[("places", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisStreetsWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Streets Night as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Streets Night](https://www.arcgis.com/sharing/rest/content/items/b22e146f927e413c92f75b5e4614354a/info/thumbnail/thumbnail1659481791228.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a custom 'night time' street map style.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=513cf2cfca4641daac73466f67c9a7dc) in ArcGIS. 
pub async fn arcgis_streetsnight_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>, places: Option<&str>) -> Result<serde_json::Value, Error<ArcgisStreetsnightWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/streets-night", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = places {
        local_var_req_builder = local_var_req_builder.query(&[("places", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisStreetsnightWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Streets Relief Base as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Streets Relief Base](https://www.arcgis.com/sharing/rest/content/items/cc4107c211bd4875bcb8be092fe56b52/info/thumbnail/thumbnail1605306188070.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a classic Esri street map style designed for use with a relief map.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=03daad361e1849bc80cb7b70ed391379) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_streetsrelief_base_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisStreetsreliefBaseWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/streets-relief/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisStreetsreliefBaseWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Streets Relief as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Streets Relief](https://www.arcgis.com/sharing/rest/content/items/03daad361e1849bc80cb7b70ed391379/info/thumbnail/thumbnail1626362491431.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a classic Esri street map style designed for use with a relief map.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=cc4107c211bd4875bcb8be092fe56b52) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_streetsrelief_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisStreetsreliefWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/streets-relief", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisStreetsreliefWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Terrain Base as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Terrain Base](https://www.arcgis.com/sharing/rest/content/items/32ce8fc627524ad4a68c1634d409e9bf/info/thumbnail/thumbnail1605306483543.jpeg)  This (v2) vector tile layer displays minimal map content: water and land fill, water lines and roads. This is designed to be used as a base layer with the World Terrain Reference layer and hillshade.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=32ce8fc627524ad4a68c1634d409e9bf) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_terrain_base_webmap_get(configuration: &configuration::Configuration, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisTerrainBaseWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/terrain/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisTerrainBaseWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Terrain Detail as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Terrain Detail](https://www.arcgis.com/sharing/rest/content/items/d6a298c4f042434f94c6b292a8776fdc/info/thumbnail/thumbnail1605306321541.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer displays minimal map content: populated place names, admin and water labels with boundary lines. This is designed to be used as a reference overlay with the World Terrain Base layer and hillshade.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=d6a298c4f042434f94c6b292a8776fdc) in ArcGIS. 
pub async fn arcgis_terrain_detail_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisTerrainDetailWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/terrain/detail", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisTerrainDetailWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Terrain as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Terrain](https://www.arcgis.com/sharing/rest/content/items/2ef1306b93c9459ca7c7b4f872c070b9/info/thumbnail/thumbnail1659481823580.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer displays minimal map content: water and land fill, water lines and roads. This is designed to be used as a base layer with the World Terrain Reference layer and hillshade.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=2ef1306b93c9459ca7c7b4f872c070b9) in ArcGIS. 
pub async fn arcgis_terrain_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisTerrainWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/terrain", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisTerrainWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Topographic Base as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Topographic Base](https://www.arcgis.com/sharing/rest/content/items/42df0d22517e49ad84edcee4c093857d/info/thumbnail/thumbnail1604913190896.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a classic Esri topographic map style designed for use with a relief map.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=42df0d22517e49ad84edcee4c093857d) in ArcGIS. 
pub async fn arcgis_topographic_base_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisTopographicBaseWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/topographic/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisTopographicBaseWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Topographic as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![ArcGIS Topographic](https://www.arcgis.com/sharing/rest/content/items/dd247558455c4ffab54566901a14f42c/info/thumbnail/thumbnail1659481851289.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a classic Esri topographic map style designed for use with a relief map.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=42df0d22517e49ad84edcee4c093857d) in ArcGIS. 
pub async fn arcgis_topographic_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisTopographicWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/arcgis/topographic", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisTopographicWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Blueprint as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![OSM Blueprint](https://www.arcgis.com/sharing/rest/content/items/80be160f0ca1413d898ad4e90d197278/info/thumbnail/thumbnail1567182316757.jpeg)   Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. The map is presented in a creative cartographic style emulating a blueprint technical drawing.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=b4e5f4018b014d609066fbfafbec5261) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_blueprint_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmBlueprintWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/osm/blueprint", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmBlueprintWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Dark Gray Base as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![OSM Dark Gray Base](https://www.arcgis.com/sharing/rest/content/items/0b90dd4780d3493ab901e956ec873b40/info/thumbnail/thumbnail1605215593891.jpeg)  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It provides a detailed base layer for the world featuring a dark neutral style with minimal colors.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=https://www.arcgis.com/home/item.html?id=0b90dd4780d3493ab901e956ec873b40) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_darkgray_base_webmap_get(configuration: &configuration::Configuration, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmDarkgrayBaseWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/osm/dark-gray/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmDarkgrayBaseWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Dark Gray Labels as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![OSM Dark Gray Labels](https://www.arcgis.com/sharing/rest/content/items/4657c531abd74085b94e2fa528f1bb78/info/thumbnail/thumbnail1605215784401.jpeg)   Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It provides a reference layer featuring map labels. It is designed for use with dark gray base layer.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=4657c531abd74085b94e2fa528f1bb78) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_darkgray_labels_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmDarkgrayLabelsWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/osm/dark-gray/labels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmDarkgrayLabelsWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Dark Gray as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![OSM Dark Gray](https://www.arcgis.com/sharing/rest/content/items/7371ca07df4047eaa5f02d09ef12b1a0/info/thumbnail/thumbnail1659481675722.png)   Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It provides a detailed base layer for the world featuring a dark neutral style with minimal colors.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=https://www.arcgis.com/home/item.html?id=253071d79cef4eceb27732a2a38ea071) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_darkgray_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmDarkgrayWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/osm/dark-gray", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmDarkgrayWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Hybrid Detail as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![OSM Hybrid Detail](https://www.arcgis.com/sharing/rest/content/items/30d6b8271e1849cd9c3042060001f425/info/thumbnail/thumbnail1580490461528.jpeg)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed reference layer for the world designed to be overlaid on imagery.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=ea5297b118c14002a237ae78c08bfb3c) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_hybrid_detail_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmHybridDetailWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/osm/hybrid/detail", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmHybridDetailWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Hybrid as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  Note that OSM Hybrid is a combination of ArcGIS Imagery with OSM Detail.  ![OSM Hybrid](https://www.arcgis.com/sharing/rest/content/items/10df2279f9684e4a9f6a7f08febac2a9/info/thumbnail/thumbnail1584118328864.jpeg)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  This layer presents low-resolution satellite imagery for the world and high-resolution satellite and aerial imagery, typically within 3-5 years of currency, for most of the world.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_hybrid_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmHybridWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/osm/hybrid", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmHybridWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Light Gray Base as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![OSM Light Gray Base](https://www.arcgis.com/sharing/rest/content/items/54c598c51e3e44cd8fec4d371cacbf11/info/thumbnail/thumbnail1605216456226.jpeg)  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It provides a detailed base layer for the world featuring a light neutral style with minimal colors.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=54c598c51e3e44cd8fec4d371cacbf11) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_lightgray_base_webmap_get(configuration: &configuration::Configuration, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmLightgrayBaseWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/osm/light-gray/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmLightgrayBaseWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Light Gray Labels as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![OSM Light Gray Labels](https://www.arcgis.com/sharing/rest/content/items/97d817fa58d64b61a303482e9dd1bad1/info/thumbnail/thumbnail1605216653342.jpeg)   Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It provides a detailed reference layer for the world featuring map labels. It is designed for use with light gray canvas base.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=https://www.arcgis.com/home/item.html?id=97d817fa58d64b61a303482e9dd1bad1) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_lightgray_labels_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmLightgrayLabelsWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/osm/light-gray/labels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmLightgrayLabelsWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Light Gray as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![OSM Light Gray](https://www.arcgis.com/sharing/rest/content/items/983b312ebd9b4d15a02e00f50acdb1c1/info/thumbnail/thumbnail1659481691967.png)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It provides a detailed base layer for the world featuring a light neutral style with minimal colors.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=a8256330828648799d24935a77d9c0c8) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_lightgray_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmLightgrayWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/osm/light-gray", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmLightgrayWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Navigation as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![OSM Navigation](https://www.arcgis.com/sharing/rest/content/items/f886634ab3f349f18199bf554bf75ee3/info/thumbnail/thumbnail.jpg)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It presents the map in a cartographic style similar to the Esri Vector Basemap Navigation map.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=d2336a0c359842a4b70ea58af6081659) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_navigation_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmNavigationWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/osm/navigation", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmNavigationWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Navigation Dark as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![OSM Navigation:Dark](https://www.arcgis.com/sharing/rest/content/items/92966c7ebc3d4ddaac34050560568bad/info/thumbnail/thumbnail1654817755687.png)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It presents the map in a cartographic style similar to the Esri Vector Basemap Navigation Dark Mode map.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=2429dd5299194d7fbe467fbbe8fa6946) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_navigationdark_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmNavigationdarkWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/osm/navigation-dark", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmNavigationdarkWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Standard as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![OSM Standard](https://www.arcgis.com/sharing/rest/content/items/695aef1564e84c06833542eb4d8c02d3/info/thumbnail/thumbnail1659481497522.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. The vector layer is  presented in OSM cartography.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=d566b72d63884fcfae0df93e10781ac8) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_standard_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmStandardWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/osm/standard", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmStandardWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Standard Relief Base as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![OSM Standard Relief Base](https://www.arcgis.com/sharing/rest/content/items/eaf6daaab5f54b6ab8343cd2685d27c2/info/thumbnail/thumbnail1605217262824.jpeg)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. The vector layer is styled using OSM cartography. It is designed to be used with World Hillshade.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=5b93370c7fc24ca3b8740abd2a55456a) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_standardrelief_base_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmStandardreliefBaseWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/osm/standard-relief/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmStandardreliefBaseWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Standard Relief as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![OSM Standard Relief](https://www.arcgis.com/sharing/rest/content/items/5b93370c7fc24ca3b8740abd2a55456a/info/thumbnail/thumbnail1659481762836.png)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. The vector layer is styled using OSM cartography. It is designed to be used with World Hillshade.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=eaf6daaab5f54b6ab8343cd2685d27c2) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_standardrelief_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmStandardreliefWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/osm/standard-relief", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmStandardreliefWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Streets as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![OSM Streets](https://www.arcgis.com/sharing/rest/content/items/bcefe41ce33943ac81d2fd801edd452c/info/thumbnail/thumbnail1659481742697.png)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It presents the map in a cartographic style similar to the Esri Vector Basemaps Street Map style.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=4094f2a1c7e5466f8d8d5a18f077e16a) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_streets_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmStreetsWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/osm/streets", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmStreetsWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Streets Relief Base as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![OSM Streets Relief Base](https://www.arcgis.com/sharing/rest/content/items/77a03088967a44eab7880e8e8df497e3/info/thumbnail/thumbnail1605216955385.jpeg)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It presents the map in an Esri street map style with relief. It is designed for use with world hillshade.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_streetsrelief_base_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmStreetsreliefBaseWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/osm/streets-relief/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmStreetsreliefBaseWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Streets Relief as a [web map](https://developers.arcgis.com/web-map-specification/objects/webmap/).  ![OSM Streets Relief](https://www.arcgis.com/sharing/rest/content/items/c6ec0420be5a4e36b57d1ef0f243b175/info/thumbnail/thumbnail1659481714018.png)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It presents the map in an Esri street map style with relief. It is designed for use with world hillshade.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=77a03088967a44eab7880e8e8df497e3) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_streetsrelief_webmap_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmStreetsreliefWebmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/osm/streets-relief", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmStreetsreliefWebmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns JSON describing the webmaps endpoint including supported styles. Includes a list of all supported languages, worldviews, and places. 
pub async fn webmaps_self_get(configuration: &configuration::Configuration, ) -> Result<models::WebmapsSelf, Error<WebmapsSelfGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/webmaps/self", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<WebmapsSelfGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

