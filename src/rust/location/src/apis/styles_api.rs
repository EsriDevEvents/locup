/*
 * Basemap styles service
 *
 * The basemap styles service provides global basemap layers in a variety of styles to use in mapping applications. Basemap layers give geographic context to a map or scene by serving static tiles containing geographic reference data. This data includes, but is not limited to, topographic features, road networks, footpaths, building footprints, water features, administrative boundaries, and localized language place labels. The JSON structure of a basemap style can be returned as the [Mapbox Style Specification](https://docs.mapbox.com/mapbox-gl-js/style-spec/) or the Esri [Web Map Specification](https://developers.arcgis.com/web-map-specification/).
 *
 * The version of the OpenAPI document: 2.4.7
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`arcgis_chartedterritory_base_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisChartedterritoryBaseStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_chartedterritory_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisChartedterritoryStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_coloredpencil_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisColoredpencilStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_community_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisCommunityStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_darkgray_base_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisDarkgrayBaseStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_darkgray_labels_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisDarkgrayLabelsStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_darkgray_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisDarkgrayStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_hillshade_dark_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHillshadeDarkStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_hillshade_light_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHillshadeLightStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_humangeography_base_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHumangeographyBaseStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_humangeography_detail_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHumangeographyDetailStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_humangeography_labels_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHumangeographyLabelsStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_humangeography_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHumangeographyStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_humangeographydark_base_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHumangeographydarkBaseStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_humangeographydark_detail_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHumangeographydarkDetailStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_humangeographydark_labels_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHumangeographydarkLabelsStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_humangeographydark_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisHumangeographydarkStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_imagery_labels_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisImageryLabelsStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_imagery_standard_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisImageryStandardStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_imagery_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisImageryStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_lightgray_base_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisLightgrayBaseStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_lightgray_labels_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisLightgrayLabelsStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_lightgray_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisLightgrayStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_midcentury_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisMidcenturyStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_modernantique_base_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisModernantiqueBaseStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_modernantique_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisModernantiqueStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_navigation_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisNavigationStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_navigationnight_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisNavigationnightStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_newspaper_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisNewspaperStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_nova_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisNovaStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_oceans_base_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisOceansBaseStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_oceans_labels_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisOceansLabelsStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_oceans_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisOceansStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_outdoor_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisOutdoorStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_streets_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisStreetsStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_streetsnight_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisStreetsnightStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_streetsrelief_base_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisStreetsreliefBaseStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_streetsrelief_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisStreetsreliefStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_terrain_base_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisTerrainBaseStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_terrain_detail_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisTerrainDetailStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_terrain_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisTerrainStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_topographic_base_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisTopographicBaseStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`arcgis_topographic_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ArcgisTopographicStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_blueprint_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmBlueprintStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_darkgray_base_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmDarkgrayBaseStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_darkgray_labels_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmDarkgrayLabelsStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_darkgray_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmDarkgrayStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_hybrid_detail_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmHybridDetailStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_hybrid_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmHybridStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_lightgray_base_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmLightgrayBaseStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_lightgray_labels_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmLightgrayLabelsStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_lightgray_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmLightgrayStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_navigation_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmNavigationStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_navigationdark_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmNavigationdarkStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_standard_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmStandardStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_standardrelief_base_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmStandardreliefBaseStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_standardrelief_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmStandardreliefStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_streets_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmStreetsStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_streetsrelief_base_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmStreetsreliefBaseStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`osm_streetsrelief_style_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OsmStreetsreliefStyleGetError {
    Status400(models::Error),
    Status401(models::Error),
    Status403(models::Error),
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`styles_self_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StylesSelfGetError {
    Status5XX(models::Error),
    UnknownValue(serde_json::Value),
}


/// Returns the JSON for ArcGIS Charted Territory Base as a style.  ![ArcGIS Charted Territory Base](https://www.arcgis.com/sharing/rest/content/items/39cf4ffa64fa4746bd8a8bb65ec62e94/info/thumbnail/thumbnail1605203449415.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a geopolitical style reminiscent of a printed atlas plate or a school classroom wall map. This layer is designed for use with shaded relief.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=303e75b27af043fd835c981ab9accf84) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_chartedterritory_base_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisChartedterritoryBaseStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/charted-territory/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisChartedterritoryBaseStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Charted Territory as a style.  ![ArcGIS Charted Territory](https://www.arcgis.com/sharing/rest/content/items/303e75b27af043fd835c981ab9accf84/info/thumbnail/thumbnail1659479127511.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a geopolitical style reminiscent of a printed atlas plate or a school classroom wall map. This layer is designed for use with shaded relief.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=39cf4ffa64fa4746bd8a8bb65ec62e94) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_chartedterritory_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisChartedterritoryStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/charted-territory", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisChartedterritoryStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Colored Pencil as a style.  ![ArcGIS Colored Pencil](https://www.arcgis.com/sharing/rest/content/items/c0ddf27614bc407f92c35020a9b48afa/info/thumbnail/thumbnail1659479513252.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer is presented in the style of hand-drawn, colored pencil cartography.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=77efd64a713946a2b8d547e73423bcca) in ArcGIS. 
pub async fn arcgis_coloredpencil_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisColoredpencilStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/colored-pencil", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisColoredpencilStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Community as a style.  ![ArcGIS Community](https://www.arcgis.com/sharing/rest/content/items/184f5b81589844699ca1e132d007920e/info/thumbnail/thumbnail1659479749621.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world in a style that is optimized to display special areas of interest (AOIs) that have been created and edited by Community Maps contributors.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=36551d7048d643618026014f3075327b) in ArcGIS. 
pub async fn arcgis_community_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisCommunityStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/community", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisCommunityStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Dark Gray Base as a style.  ![ArcGIS Dark Gray Base](https://www.arcgis.com/sharing/rest/content/items/f8dec62d37504266b0578ce7453b808b/info/thumbnail/thumbnail1605204085996.jpeg)  This (v2) vector tile layer provides a detailed basemap for the world featuring a dark neutral background style with minimal colors, labels, and features. This map is designed to be used with Dark Gray Canvas Reference.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=f8dec62d37504266b0578ce7453b808b) in ArcGIS. 
pub async fn arcgis_darkgray_base_style_get(configuration: &configuration::Configuration, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisDarkgrayBaseStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/dark-gray/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisDarkgrayBaseStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Dark Gray Labels as a style.  ![ArcGIS Dark Gray Labels](https://www.arcgis.com/sharing/rest/content/items/8bf7f2dffe434dc9a88f39283823ab09/info/thumbnail/thumbnail1605214219524.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a city reference overlay for the world designed for use over a dark neutral background style with minimal colors, labels, and features. This map is designed to be used with Dark Gray Canvas Base.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=8bf7f2dffe434dc9a88f39283823ab09) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_darkgray_labels_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisDarkgrayLabelsStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/dark-gray/labels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisDarkgrayLabelsStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Dark Gray as a style.  ![ArcGIS Dark Gray](https://www.arcgis.com/sharing/rest/content/items/7742cd5abef8497288dc81426266df9b/info/thumbnail/thumbnail1659479985387.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a dark neutral background style with minimal colors, labels, and features. This map is designed to be used with Dark Gray Canvas Reference.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=9a2d2c3012c346b08adf961f18b30c89) in ArcGIS. 
pub async fn arcgis_darkgray_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisDarkgrayStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/dark-gray", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisDarkgrayStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Hillshade Dark as a style.  ![ArcGIS Hillshade Dark](https://www.arcgis.com/sharing/rest/content/items/f513ac256fbe48f091b53182190a7d35/info/thumbnail/thumbnail1585608311285.png)  World Hillshade (Dark) is especially useful in building maps that provide terrain context while highlighting feature layers and labels.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_hillshade_dark_style_get(configuration: &configuration::Configuration, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHillshadeDarkStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/hillshade/dark", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHillshadeDarkStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Hillshade Light as a style.  ![ArcGIS Hillshade Light](https://www.arcgis.com/sharing/rest/content/items/1b243539f4514b6ba35e7d995890db1d/info/thumbnail/thumbnail1718052727979.png)  This layer portrays elevation as an artistic hillshade. The map is designed to be used as a backdrop for topographic, soil, hydro, landcover or other outdoor recreational maps.  For more information about the style, data providers, attribution, and terms of use, go to the following item pages:  - [Charted Territory](https://www.arcgis.com/home/item.html?id=303e75b27af043fd835c981ab9accf84) - [Modern Antique](https://www.arcgis.com/home/item.html?id=b69f2876ce4c4e9db185cdc857fcebc7) - [Streets with Relief](https://www.arcgis.com/home/item.html?id=03daad361e1849bc80cb7b70ed391379) - [Terrain with Labels](https://www.arcgis.com/home/item.html?id=2ef1306b93c9459ca7c7b4f872c070b9) - [OpenStreetMap with Relief](https://www.arcgis.com/home/item.html?id=5b93370c7fc24ca3b8740abd2a55456a)  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_hillshade_light_style_get(configuration: &configuration::Configuration, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHillshadeLightStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/hillshade/light", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHillshadeLightStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Human Geography Base as a style.  ![ArcGIS Human Geography Base](https://www.arcgis.com/sharing/rest/content/items/40fc50413164430ebfa2e6b5ac27de27/info/thumbnail/thumbnail1664265082295.png)  Simple (v2) vector tile layer basemap with no content other than monochromatic land polygons. This map is designed for use with Human Geography Labels and Detail layers.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=6a6bf92e7824417db632aa1d058a13b4) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_humangeography_base_style_get(configuration: &configuration::Configuration, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHumangeographyBaseStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/human-geography/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHumangeographyBaseStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Human Geography Detail as a style.  ![ArcGIS Human Geography Detail](https://www.arcgis.com/sharing/rest/content/items/b15ccad985fa4cb892836b2bde1465e9/info/thumbnail/thumbnail1664265112023.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world, featuring a monochromatic style with content adjusted to support Human Geography information. This map is designed for use with Human Geography Labels and Base layers.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=6a6bf92e7824417db632aa1d058a13b4) in ArcGIS. 
pub async fn arcgis_humangeography_detail_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHumangeographyDetailStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/human-geography/detail", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHumangeographyDetailStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Human Geography Labels as a style.  ![ArcGIS Human Geography Labels](https://www.arcgis.com/sharing/rest/content/items/b522f3412d474423878e5adafda0fc56/info/thumbnail/thumbnail1664265132944.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer forms a detailed basemap for the world, featuring a monochromatic style with content consisting of labels to support Human Geography information. This map is designed for use with Human Geography Detail and Base layers.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=6a6bf92e7824417db632aa1d058a13b4) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_humangeography_labels_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHumangeographyLabelsStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/human-geography/labels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHumangeographyLabelsStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Human Geography as a style.  ![ArcGIS Human Geography](https://www.arcgis.com/sharing/rest/content/items/6a6bf92e7824417db632aa1d058a13b4/info/thumbnail/thumbnail1664546258111.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This provides a detailed basemap, featuring a monochromatic style with content adjusted to support Human Geography information.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=6a6bf92e7824417db632aa1d058a13b4) in ArcGIS. 
pub async fn arcgis_humangeography_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHumangeographyStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/human-geography", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHumangeographyStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Human Geography Dark Base as a style.  ![ArcGIS Human Geography Dark Base](https://www.arcgis.com/sharing/rest/content/items/efbf4b251cc242aca426c18ea0c351fe/info/thumbnail/thumbnail1664265092438.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  Simple (v2) vector tile layer basemap with no content other than dark monochromatic land polygons. This map is designed for use with Human Geography Dark Labels and Detail layers.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=69b9605f8a734c6f861148bb8e5a1f40) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_humangeographydark_base_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHumangeographydarkBaseStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/human-geography-dark/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHumangeographydarkBaseStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Human Geography Dark Detail as a style.  ![ArcGIS Human Geography Dark Detail](https://www.arcgis.com/sharing/rest/content/items/0168657cb54c4601a0c5815f20127416/info/thumbnail/thumbnail1664265100951.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world, featuring a dark monochromatic style with content adjusted to support Human Geography information. This map is designed for use with Human Geography Dark Labels and Base layers.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=69b9605f8a734c6f861148bb8e5a1f40) in ArcGIS. 
pub async fn arcgis_humangeographydark_detail_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHumangeographydarkDetailStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/human-geography-dark/detail", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHumangeographydarkDetailStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Human Geography Dark Labels as a style.  ![ArcGIS Human Geography Dark Labels](https://www.arcgis.com/sharing/rest/content/items/94ef8bca232c40728dfe838951798022/info/thumbnail/thumbnail1664265120612.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world, featuring a dark monochromatic style with content adjusted to support Human Geography information. This map is designed for use with Human Geography Dark Detail and Base layers.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=69b9605f8a734c6f861148bb8e5a1f40) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_humangeographydark_labels_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHumangeographydarkLabelsStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/human-geography-dark/labels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHumangeographydarkLabelsStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Human Geography Dark as a style.  ![ArcGIS Human Geography Dark](https://www.arcgis.com/sharing/rest/content/items/69b9605f8a734c6f861148bb8e5a1f40/info/thumbnail/thumbnail1664546284715.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This provides a detailed basemap, featuring a dark monochromatic style with content adjusted to support Human Geography information.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=69b9605f8a734c6f861148bb8e5a1f40) in ArcGIS. 
pub async fn arcgis_humangeographydark_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisHumangeographydarkStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/human-geography-dark", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisHumangeographydarkStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Imagery Labels as a style.  ![ArcGIS Imagery Labels](https://www.arcgis.com/sharing/rest/content/items/e71216afee5045b59e015702a0169183/info/thumbnail/thumbnail1605214382152.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed reference layer for the world designed to be overlaid on imagery.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=c7d2b5c334364e8fb5b73b0f4d6a779b) in ArcGIS. 
pub async fn arcgis_imagery_labels_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>, places: Option<&str>) -> Result<serde_json::Value, Error<ArcgisImageryLabelsStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/imagery/labels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = places {
        local_var_req_builder = local_var_req_builder.query(&[("places", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisImageryLabelsStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Imagery Standard as a style.  ![ArcGIS Imagery Standard](https://www.arcgis.com/sharing/rest/content/items/c7d2b5c334364e8fb5b73b0f4d6a779b/info/thumbnail/thumbnail1659480145425.png)  This layer presents low-resolution satellite imagery for the world and high-resolution satellite and aerial imagery, typically within 3-5 years of currency, for most of the world.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=c7d2b5c334364e8fb5b73b0f4d6a779b) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_imagery_standard_style_get(configuration: &configuration::Configuration, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisImageryStandardStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/imagery/standard", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisImageryStandardStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Imagery as a style.  ![ArcGIS Imagery](https://www.arcgis.com/sharing/rest/content/items/ea3befe305494bb5b2acd77e1b3135dc/info/thumbnail/thumbnail1659480292164.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This layer presents low-resolution satellite imagery for the world and high-resolution satellite and aerial imagery, typically within 3-5 years of currency, for most of the world.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=c7d2b5c334364e8fb5b73b0f4d6a779b) in ArcGIS. 
pub async fn arcgis_imagery_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>, places: Option<&str>) -> Result<serde_json::Value, Error<ArcgisImageryStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/imagery", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = places {
        local_var_req_builder = local_var_req_builder.query(&[("places", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisImageryStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Light Gray Base as a style.  ![ArcGIS Light Gray Base](https://www.arcgis.com/sharing/rest/content/items/140be45035d74b5ab4c2a871a8503b84/info/thumbnail/thumbnail1605214510516.jpeg)  This (v2) vector tile layer provides a detailed basemap for the world featuring a light neutral background style with minimal colors, labels, and features.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=140be45035d74b5ab4c2a871a8503b84) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_lightgray_base_style_get(configuration: &configuration::Configuration, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisLightgrayBaseStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/light-gray/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisLightgrayBaseStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Light Gray Labels as a style.  ![ArcGIS Light Gray Labels](https://www.arcgis.com/sharing/rest/content/items/615e9eeef23346b3934faa55f834aa6d/info/thumbnail/thumbnail1605214617146.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed reference overlay for the world featuring a light neutral background style with minimal colors, labels, and features. This map is designed to be used with Light Gray Canvas Base.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=615e9eeef23346b3934faa55f834aa6d) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_lightgray_labels_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisLightgrayLabelsStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/light-gray/labels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisLightgrayLabelsStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Light Gray as a style.  ![ArcGIS Light Gray](https://www.arcgis.com/sharing/rest/content/items/0f74af7609054be8a29e0ba5f154f0a8/info/thumbnail/thumbnail1659480444177.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a light neutral background style with minimal colors, labels, and features.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=96ed54f1daf24a6992b7e7317bebd744) in ArcGIS. 
pub async fn arcgis_lightgray_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisLightgrayStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/light-gray", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisLightgrayStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Midcentury as a style.  ![ArcGIS Midcentury](https://www.arcgis.com/sharing/rest/content/items/52d6a28f09704f04b33761ba7c4bf93f/info/thumbnail/thumbnail1659480642524.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer is inspired by the art and advertising of the 1950's. This customized vector style presents a unique design option to the ArcGIS basemaps.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=c97d9da9538b4e6ab9ebbd2fa6e2fd3f) in ArcGIS. 
pub async fn arcgis_midcentury_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisMidcenturyStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/midcentury", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisMidcenturyStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Modern Antique Base as a style.  ![ArcGIS Modern Antique Base](https://www.arcgis.com/sharing/rest/content/items/ac21aa7d31324027990b03fb9773b7b5/info/thumbnail/thumbnail1605214857470.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  Unique (v2) vector tile layer customization. Updating the look of 18th and 19th century antique maps in the modern world of multi-scale mapping. This map is designed to be used with World Hillshade.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=b69f2876ce4c4e9db185cdc857fcebc7) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_modernantique_base_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisModernantiqueBaseStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/modern-antique/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisModernantiqueBaseStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Modern Antique as a style.  ![ArcGIS Modern Antique](https://www.arcgis.com/sharing/rest/content/items/b69f2876ce4c4e9db185cdc857fcebc7/info/thumbnail/thumbnail1659480749462.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  Unique (v2) vector tile layer customization. Updating the look of 18th and 19th century antique maps in the modern world of multi-scale mapping. This map is designed to be used with World Hillshade.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=ac21aa7d31324027990b03fb9773b7b5) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_modernantique_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisModernantiqueStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/modern-antique", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisModernantiqueStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Navigation as a style.  ![ArcGIS Navigation](https://www.arcgis.com/sharing/rest/content/items/78c096abedb9498380f5db1922f96aa0/info/thumbnail/thumbnail1659480881868.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a custom navigation map style.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=ad3775594223464abc4addd501a0c5a8) in ArcGIS. 
pub async fn arcgis_navigation_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>, places: Option<&str>) -> Result<serde_json::Value, Error<ArcgisNavigationStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/navigation", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = places {
        local_var_req_builder = local_var_req_builder.query(&[("places", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisNavigationStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Navigation Night as a style.  ![ArcGIS Navigation Night](https://www.arcgis.com/sharing/rest/content/items/77073a29526046b89bb5622b6276e933/info/thumbnail/thumbnail1659480999259.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a 'dark mode' version of the Navigation vector basemap, using the same content.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=244d18f67fc046e89d4f04ac839ca56c) in ArcGIS. 
pub async fn arcgis_navigationnight_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>, places: Option<&str>) -> Result<serde_json::Value, Error<ArcgisNavigationnightStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/navigation-night", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = places {
        local_var_req_builder = local_var_req_builder.query(&[("places", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisNavigationnightStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Newspaper as a style.  ![ArcGIS Newspaper](https://www.arcgis.com/sharing/rest/content/items/e3c062eedf8b487b8bb5b9b08db1b7a9/info/thumbnail/thumbnail1659481176432.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer presents a unique take on the Esri vector tile basemap. This Newspaper style tile layer is a black & white design with halftone patterns, red highlights, and stylized fonts.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=4ba39bdd9bdb42e1a5c5a0664d6aa4d7) in ArcGIS. 
pub async fn arcgis_newspaper_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisNewspaperStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/newspaper", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisNewspaperStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Nova as a style.  ![ArcGIS Nova](https://www.arcgis.com/sharing/rest/content/items/90f86b329f37499096d3715ac6e5ed1f/info/thumbnail/thumbnail1659481192979.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a dark background with glowing blue symbology inspired by the ArcGIS.com splash screen.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=6e481fb5345748bb8ff50441eb1afb28) in ArcGIS. 
pub async fn arcgis_nova_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisNovaStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/nova", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisNovaStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Oceans Base as a style.  ![ArcGIS Oceans Base](https://www.arcgis.com/sharing/rest/content/items/1e126e7520f9466c9ca28b8f28b5e500/info/thumbnail/thumbnail1574706730697.jpeg)  This layer is designed to be used as a basemap by marine GIS professionals and as a reference map by anyone interested in ocean data.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=b1dca7ef7b61466785901c41aed89ba5) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_oceans_base_style_get(configuration: &configuration::Configuration, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisOceansBaseStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/oceans/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisOceansBaseStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Oceans Labels as a style.  ![ArcGIS Oceans Labels](https://www.maps.arcgis.com/sharing/rest/content/items/549bc703f887476c9356a8756068767a/info/thumbnail/thumbnail1605305854401.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer is designed to be used as the reference layer for the World Ocean Base map.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=549bc703f887476c9356a8756068767a) in ArcGIS. 
pub async fn arcgis_oceans_labels_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisOceansLabelsStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/oceans/labels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisOceansLabelsStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Oceans as a style.  ![ArcGIS Oceans](https://www.arcgis.com/sharing/rest/content/items/b1dca7ef7b61466785901c41aed89ba5/info/thumbnail/thumbnail1659481432351.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This layer is designed to be used as a basemap by marine GIS professionals and as a reference map by anyone interested in ocean data.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=b1dca7ef7b61466785901c41aed89ba5) in ArcGIS. 
pub async fn arcgis_oceans_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisOceansStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/oceans", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisOceansStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Outdoor as a style.  ![ArcGIS Outdoor](https://www.arcgis.com/sharing/rest/content/items/659e7c1b1e374f6c8a89eefe17b23380/info/thumbnail/thumbnail1658946460034.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap with an emphasis on the natural world. It includes rich cartographic styling with vector contours and vector hillshade. This is a multisource style. This layer is in beta.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=a409072a313a43b392bb6003b0da5824) 
pub async fn arcgis_outdoor_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisOutdoorStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/outdoor", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisOutdoorStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Streets as a style.  ![ArcGIS Streets](https://www.arcgis.com/sharing/rest/content/items/e3e6df1d2f6a485d8a70f28fdd3ce19e/info/thumbnail/thumbnail1626360997976.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a classic Esri street map style.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=ab81d22899024ea08c8bb5a88cc1775e) in ArcGIS. 
pub async fn arcgis_streets_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>, places: Option<&str>) -> Result<serde_json::Value, Error<ArcgisStreetsStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/streets", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = places {
        local_var_req_builder = local_var_req_builder.query(&[("places", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisStreetsStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Streets Night as a style.  ![ArcGIS Streets Night](https://www.arcgis.com/sharing/rest/content/items/b22e146f927e413c92f75b5e4614354a/info/thumbnail/thumbnail1659481791228.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a custom 'night time' street map style.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=513cf2cfca4641daac73466f67c9a7dc) in ArcGIS. 
pub async fn arcgis_streetsnight_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>, places: Option<&str>) -> Result<serde_json::Value, Error<ArcgisStreetsnightStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/streets-night", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = places {
        local_var_req_builder = local_var_req_builder.query(&[("places", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisStreetsnightStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Streets Relief  Base as a style.  ![ArcGIS Streets Relief Base](https://www.arcgis.com/sharing/rest/content/items/cc4107c211bd4875bcb8be092fe56b52/info/thumbnail/thumbnail1605306188070.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a classic Esri street map style designed for use with a relief map.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=03daad361e1849bc80cb7b70ed391379) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_streetsrelief_base_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisStreetsreliefBaseStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/streets-relief/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisStreetsreliefBaseStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Streets Relief as a style.  ![ArcGIS Streets Relief](https://www.arcgis.com/sharing/rest/content/items/03daad361e1849bc80cb7b70ed391379/info/thumbnail/thumbnail1626362491431.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a classic Esri street map style designed for use with a relief map.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=cc4107c211bd4875bcb8be092fe56b52) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_streetsrelief_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisStreetsreliefStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/streets-relief", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisStreetsreliefStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Terrain Base as a style.  ![ArcGIS Terrain Base](https://www.arcgis.com/sharing/rest/content/items/32ce8fc627524ad4a68c1634d409e9bf/info/thumbnail/thumbnail1605306483543.jpeg)  This (v2) vector tile layer displays minimal map content: water and land fill, water lines and roads. This is designed to be used as a base layer with the World Terrain Reference layer and hillshade.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=32ce8fc627524ad4a68c1634d409e9bf) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn arcgis_terrain_base_style_get(configuration: &configuration::Configuration, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisTerrainBaseStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/terrain/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisTerrainBaseStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Terrain Detail as a style.  ![ArcGIS Terrain Detail](https://www.arcgis.com/sharing/rest/content/items/d6a298c4f042434f94c6b292a8776fdc/info/thumbnail/thumbnail1605306321541.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer displays minimal map content: populated place names, admin and water labels with boundary lines. This is designed to be used as a reference overlay with the World Terrain Base layer and hillshade.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=d6a298c4f042434f94c6b292a8776fdc) in ArcGIS. 
pub async fn arcgis_terrain_detail_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisTerrainDetailStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/terrain/detail", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisTerrainDetailStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Terrain as a style.  ![ArcGIS Terrain](https://www.arcgis.com/sharing/rest/content/items/2ef1306b93c9459ca7c7b4f872c070b9/info/thumbnail/thumbnail1659481823580.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer displays minimal map content: water and land fill, water lines and roads. This is designed to be used as a base layer with the World Terrain Reference layer and hillshade.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=2ef1306b93c9459ca7c7b4f872c070b9) in ArcGIS. 
pub async fn arcgis_terrain_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisTerrainStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/terrain", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisTerrainStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Topographic Base as a style.  ![ArcGIS Topographic Base](https://www.arcgis.com/sharing/rest/content/items/42df0d22517e49ad84edcee4c093857d/info/thumbnail/thumbnail1604913190896.jpeg)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a classic Esri topographic map style designed for use with a relief map.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=42df0d22517e49ad84edcee4c093857d) in ArcGIS. 
pub async fn arcgis_topographic_base_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisTopographicBaseStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/topographic/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisTopographicBaseStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for ArcGIS Topographic as a style.  ![ArcGIS Topographic](https://www.arcgis.com/sharing/rest/content/items/dd247558455c4ffab54566901a14f42c/info/thumbnail/thumbnail1659481851289.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed basemap for the world featuring a classic Esri topographic map style designed for use with a relief map.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=42df0d22517e49ad84edcee4c093857d) in ArcGIS. 
pub async fn arcgis_topographic_style_get(configuration: &configuration::Configuration, language: Option<&str>, worldview: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<ArcgisTopographicStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/arcgis/topographic", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = worldview {
        local_var_req_builder = local_var_req_builder.query(&[("worldview", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ArcgisTopographicStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Blueprint as a style.  ![OSM Blueprint](https://www.arcgis.com/sharing/rest/content/items/80be160f0ca1413d898ad4e90d197278/info/thumbnail/thumbnail1567182316757.jpeg)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. The map is presented in a creative cartographic style emulating a blueprint technical drawing.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=b4e5f4018b014d609066fbfafbec5261) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_blueprint_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmBlueprintStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/osm/blueprint", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmBlueprintStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Dark Gray Base as a style.  ![OSM Dark Gray Base](https://www.arcgis.com/sharing/rest/content/items/0b90dd4780d3493ab901e956ec873b40/info/thumbnail/thumbnail1605215593891.jpeg)  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It provides a detailed base layer for the world featuring a dark neutral style with minimal colors.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=https://www.arcgis.com/home/item.html?id=0b90dd4780d3493ab901e956ec873b40) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_darkgray_base_style_get(configuration: &configuration::Configuration, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmDarkgrayBaseStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/osm/dark-gray/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmDarkgrayBaseStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Dark Gray Labels as a style.  ![OSM Dark Gray Labels](https://www.arcgis.com/sharing/rest/content/items/4657c531abd74085b94e2fa528f1bb78/info/thumbnail/thumbnail1605215784401.jpeg)   Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It provides a reference layer featuring map labels. It is designed for use with dark gray base layer.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=4657c531abd74085b94e2fa528f1bb78) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_darkgray_labels_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmDarkgrayLabelsStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/osm/dark-gray/labels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmDarkgrayLabelsStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Dark Gray as a style.  ![OSM Dark Gray](https://www.arcgis.com/sharing/rest/content/items/7371ca07df4047eaa5f02d09ef12b1a0/info/thumbnail/thumbnail1659481675722.png)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It provides a detailed base layer for the world featuring a dark neutral style with minimal colors.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=https://www.arcgis.com/home/item.html?id=253071d79cef4eceb27732a2a38ea071) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_darkgray_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmDarkgrayStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/osm/dark-gray", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmDarkgrayStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Hybrid Detail as a style.  ![OSM Hybrid Detail](https://www.arcgis.com/sharing/rest/content/items/30d6b8271e1849cd9c3042060001f425/info/thumbnail/thumbnail1580490461528.jpeg)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  This (v2) vector tile layer provides a detailed reference layer for the world designed to be overlaid on imagery.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=ea5297b118c14002a237ae78c08bfb3c) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_hybrid_detail_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmHybridDetailStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/osm/hybrid/detail", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmHybridDetailStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Hybrid as a style.  Note that OSM Hybrid is a combination of ArcGIS Imagery with OSM Detail.  ![OSM Hybrid](https://www.arcgis.com/sharing/rest/content/items/10df2279f9684e4a9f6a7f08febac2a9/info/thumbnail/thumbnail1584118328864.jpeg)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  This layer presents low-resolution satellite imagery for the world and high-resolution satellite and aerial imagery, typically within 3-5 years of currency, for most of the world.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_hybrid_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmHybridStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/osm/hybrid", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmHybridStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Light Gray Base as a style.  ![OSM Light Gray Base](https://www.arcgis.com/sharing/rest/content/items/54c598c51e3e44cd8fec4d371cacbf11/info/thumbnail/thumbnail1605216456226.jpeg)  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It provides a detailed base layer for the world featuring a light neutral style with minimal colors.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=54c598c51e3e44cd8fec4d371cacbf11) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_lightgray_base_style_get(configuration: &configuration::Configuration, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmLightgrayBaseStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/osm/light-gray/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmLightgrayBaseStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Light Gray Labels as a style.  ![OSM Light Gray Labels](https://www.arcgis.com/sharing/rest/content/items/97d817fa58d64b61a303482e9dd1bad1/info/thumbnail/thumbnail1605216653342.jpeg)   Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It provides a detailed reference layer for the world featuring map labels. It is designed for use with light gray canvas base.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=https://www.arcgis.com/home/item.html?id=97d817fa58d64b61a303482e9dd1bad1) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_lightgray_labels_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmLightgrayLabelsStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/osm/light-gray/labels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmLightgrayLabelsStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Light Gray as a style.  ![OSM Light Gray](https://www.arcgis.com/sharing/rest/content/items/983b312ebd9b4d15a02e00f50acdb1c1/info/thumbnail/thumbnail1659481691967.png)   Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It provides a detailed base layer for the world featuring a light neutral style with minimal colors.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=a8256330828648799d24935a77d9c0c8) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_lightgray_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmLightgrayStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/osm/light-gray", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmLightgrayStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Navigation as a style.  ![OSM Navigation](https://www.arcgis.com/sharing/rest/content/items/f886634ab3f349f18199bf554bf75ee3/info/thumbnail/thumbnail.jpg)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It presents the map in a cartographic style similar to the Esri Vector Basemap Navigation map.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=d2336a0c359842a4b70ea58af6081659) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_navigation_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmNavigationStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/osm/navigation", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmNavigationStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Navigation Dark as a style.  ![OSM Navigation:Dark](https://www.arcgis.com/sharing/rest/content/items/92966c7ebc3d4ddaac34050560568bad/info/thumbnail/thumbnail1654817755687.png)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It presents the map in a cartographic style similar to the Esri Vector Basemap Navigation Dark Mode map.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=2429dd5299194d7fbe467fbbe8fa6946) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_navigationdark_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmNavigationdarkStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/osm/navigation-dark", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmNavigationdarkStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Standard as a style.  ![OSM Standard](https://www.arcgis.com/sharing/rest/content/items/695aef1564e84c06833542eb4d8c02d3/info/thumbnail/thumbnail1659481497522.png)  The default global place labels are in English. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. The vector layer is  presented in OSM cartography.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=d566b72d63884fcfae0df93e10781ac8) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_standard_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmStandardStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/osm/standard", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmStandardStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Standard Relief Base as a style.  ![OSM Standard Relief Base](https://www.arcgis.com/sharing/rest/content/items/eaf6daaab5f54b6ab8343cd2685d27c2/info/thumbnail/thumbnail1605217262824.jpeg)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. The vector layer is styled using OSM cartography. It is designed to be used with World Hillshade.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=5b93370c7fc24ca3b8740abd2a55456a) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_standardrelief_base_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmStandardreliefBaseStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/osm/standard-relief/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmStandardreliefBaseStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Standard Relief as a style.  ![OSM Standard Relief](https://www.arcgis.com/sharing/rest/content/items/5b93370c7fc24ca3b8740abd2a55456a/info/thumbnail/thumbnail1659481762836.png)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. The vector layer is styled using OSM cartography. It is designed to be used with World Hillshade.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=eaf6daaab5f54b6ab8343cd2685d27c2) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_standardrelief_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmStandardreliefStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/osm/standard-relief", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmStandardreliefStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Streets as a style.  ![OSM Streets](https://www.arcgis.com/sharing/rest/content/items/bcefe41ce33943ac81d2fd801edd452c/info/thumbnail/thumbnail1659481742697.png)  Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It presents the map in a cartographic style similar to the Esri Vector Basemaps Street Map style.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=4094f2a1c7e5466f8d8d5a18f077e16a) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_streets_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmStreetsStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/osm/streets", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmStreetsStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Streets Relief Base as a style.  ![OSM Streets Relief Base](https://www.arcgis.com/sharing/rest/content/items/77a03088967a44eab7880e8e8df497e3/info/thumbnail/thumbnail1605216955385.jpeg)   Place labels are, by default, localized. To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It presents the map in an Esri street map style with relief. It is designed for use with world hillshade.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_streetsrelief_base_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmStreetsreliefBaseStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/osm/streets-relief/base", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmStreetsreliefBaseStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the JSON for OSM Streets Relief as a style.  ![OSM Streets Relief](https://www.arcgis.com/sharing/rest/content/items/c6ec0420be5a4e36b57d1ef0f243b175/info/thumbnail/thumbnail1659481714018.png)  Place labels are, by default, localized.  To display place labels in other languages, use the `language` parameter.  OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. This vector basemap is based on the Daylight map distribution of OSM data and is hosted by Esri. It presents the map in an Esri street map style with relief. It is designed for use with world hillshade.  For more information about the style, data providers, attribution, and terms of use, go to the [item page](https://www.arcgis.com/home/item.html?id=77a03088967a44eab7880e8e8df497e3) in ArcGIS.  **Note:**  This endpoint does not support worldviews. Making a request to this endpoint with a `worldview` query parameter will result in a `bad request`. 
pub async fn osm_streetsrelief_style_get(configuration: &configuration::Configuration, language: Option<&str>, token: Option<&str>, f: Option<&str>) -> Result<serde_json::Value, Error<OsmStreetsreliefStyleGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/osm/streets-relief", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f {
        local_var_req_builder = local_var_req_builder.query(&[("f", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OsmStreetsreliefStyleGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns JSON describing the styles endpoint including supported styles. Includes a list of all supported languages, worldviews, and places. 
pub async fn styles_self_get(configuration: &configuration::Configuration, ) -> Result<models::StylesSelf, Error<StylesSelfGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/styles/self", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("token", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Esri-Authorization", local_var_value);
    };
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<StylesSelfGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

