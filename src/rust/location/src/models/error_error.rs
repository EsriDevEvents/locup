/*
 * Basemap styles service
 *
 * The basemap styles service provides global basemap layers in a variety of styles to use in mapping applications. Basemap layers give geographic context to a map or scene by serving static tiles containing geographic reference data. This data includes, but is not limited to, topographic features, road networks, footpaths, building footprints, water features, administrative boundaries, and localized language place labels. The JSON structure of a basemap style can be returned as the [Mapbox Style Specification](https://docs.mapbox.com/mapbox-gl-js/style-spec/) or the Esri [Web Map Specification](https://developers.arcgis.com/web-map-specification/).
 *
 * The version of the OpenAPI document: 2.4.7
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ErrorError : Error information
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorError {
    /// A code identifying the type of error, either an HTTP error code, `498` (signifying invalid or expired token), or `499` (signifying missing token).
    #[serde(rename = "code")]
    pub code: Code,
    /// A message describing the error.
    #[serde(rename = "message")]
    pub message: String,
    /// List of details about the error.
    #[serde(rename = "details", skip_serializing_if = "Option::is_none")]
    pub details: Option<Vec<String>>,
    /// URL that provides the basemap-styles service information.
    #[serde(rename = "restInfoUrl", skip_serializing_if = "Option::is_none")]
    pub rest_info_url: Option<String>,
}

impl ErrorError {
    /// Error information
    pub fn new(code: Code, message: String) -> ErrorError {
        ErrorError {
            code,
            message,
            details: None,
            rest_info_url: None,
        }
    }
}
/// A code identifying the type of error, either an HTTP error code, `498` (signifying invalid or expired token), or `499` (signifying missing token).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Code {
    #[serde(rename = "400")]
    Variant400,
    #[serde(rename = "401")]
    Variant401,
    #[serde(rename = "403")]
    Variant403,
    #[serde(rename = "404")]
    Variant404,
    #[serde(rename = "498")]
    Variant498,
    #[serde(rename = "499")]
    Variant499,
    #[serde(rename = "500")]
    Variant500,
}

impl Default for Code {
    fn default() -> Code {
        Self::Variant400
    }
}

