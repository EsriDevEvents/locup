/*
 * Basemap styles service
 *
 * The basemap styles service provides global basemap layers in a variety of styles to use in mapping applications. Basemap layers give geographic context to a map or scene by serving static tiles containing geographic reference data. This data includes, but is not limited to, topographic features, road networks, footpaths, building footprints, water features, administrative boundaries, and localized language place labels. The JSON structure of a basemap style can be returned as the [Mapbox Style Specification](https://docs.mapbox.com/mapbox-gl-js/style-spec/) or the Esri [Web Map Specification](https://developers.arcgis.com/web-map-specification/).
 *
 * The version of the OpenAPI document: 2.4.7
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// WebmapsSelf : Describes the list of available webmap endpoints.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebmapsSelf {
    /// Supported languages that can be passed to the {?language} parameters.
    #[serde(rename = "languages")]
    pub languages: Vec<models::ServiceSelfLanguagesInner>,
    /// Supported worldviews that can be passed to the {?worldview} parameters.
    #[serde(rename = "worldviews")]
    pub worldviews: Vec<models::ServiceSelfWorldviewsInner>,
    /// Supported places values that can be passed to the {?places} parameters.
    #[serde(rename = "places")]
    pub places: Vec<models::ServiceSelfPlacesInner>,
    /// list of provided styles that can be used.
    #[serde(rename = "styles")]
    pub styles: Vec<models::WebmapItemSelf>,
    /// URL that points to self.
    #[serde(rename = "selfUrl")]
    pub self_url: String,
    /// URL that points to the endpoint for custom style webmaps.
    #[serde(rename = "customStylesUrl")]
    pub custom_styles_url: String,
}

impl WebmapsSelf {
    /// Describes the list of available webmap endpoints.
    pub fn new(languages: Vec<models::ServiceSelfLanguagesInner>, worldviews: Vec<models::ServiceSelfWorldviewsInner>, places: Vec<models::ServiceSelfPlacesInner>, styles: Vec<models::WebmapItemSelf>, self_url: String, custom_styles_url: String) -> WebmapsSelf {
        WebmapsSelf {
            languages,
            worldviews,
            places,
            styles,
            self_url,
            custom_styles_url,
        }
    }
}

